<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot 常用注解</title>
      <link href="/2025/09/10/SpringBoot/"/>
      <url>/2025/09/10/SpringBoot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Spring-Boot-常用注解"><a href="#Spring-Boot-常用注解" class="headerlink" title="Spring Boot 常用注解"></a>Spring Boot 常用注解</h3><h4 id="一、-启动与核心配置注解"><a href="#一、-启动与核心配置注解" class="headerlink" title="一、 启动与核心配置注解"></a>一、 启动与核心配置注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th><th align="left">核心示例</th></tr></thead><tbody><tr><td align="left"><strong><code>@SpringBootApplication</code></strong></td><td align="left"><strong>Spring Boot 启动类注解</strong>。一个复合注解，包含了 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code>。是所有 Spring Boot 应用的起点。</td><td align="left"><code>java @SpringBootApplication public class MyApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(MyApplication.class, args); &#125; &#125;</code></td></tr><tr><td align="left"><code>@EnableAutoConfiguration</code></td><td align="left"><strong>启用自动配置</strong>。告诉 Spring Boot 根据你添加的依赖（jar包）来“猜测”并自动配置你想要的 Bean。例如，看到 <code>spring-boot-starter-web</code> 就会自动配置 Tomcat 和 Spring MVC。</td><td align="left">(通常由 <code>@SpringBootApplication</code> 隐式包含)</td></tr><tr><td align="left"><code>@ComponentScan</code></td><td align="left"><strong>组件扫描</strong>。默认扫描启动类所在的包及其所有子包下的组件（如 <code>@Component</code>, <code>@Service</code> 等）。</td><td align="left">(通常由 <code>@SpringBootApplication</code> 隐式包含)</td></tr><tr><td align="left"><code>@Configuration</code></td><td align="left"><strong>声明配置类</strong>。将一个类标记为 Spring 的配置源。这个类中可以使用 <code>@Bean</code> 注解来定义 Bean。</td><td align="left"><code>java @Configuration public class AppConfig &#123; @Bean public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; &#125;</code></td></tr><tr><td align="left"><code>@Bean</code></td><td align="left"><strong>定义 Bean</strong>。用在方法上，告诉 Spring 这个方法的返回值是一个需要注册到容器中的 Bean。Spring 会负责管理这个对象的生命周期。</td><td align="left">(见 <code>@Configuration</code> 示例)</td></tr></tbody></table><hr><h4 id="二、-组件与依赖注入注解-IoC-DI"><a href="#二、-组件与依赖注入注解-IoC-DI" class="headerlink" title="二、 组件与依赖注入注解 (IoC&#x2F;DI)"></a>二、 组件与依赖注入注解 (IoC&#x2F;DI)</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th><th align="left">核心示例</th></tr></thead><tbody><tr><td align="left"><strong><code>@Component</code></strong></td><td align="left"><strong>通用组件注解</strong>。将一个类标记为 Spring 管理的组件。它是所有构造型注解（如 <code>@Service</code>, <code>@Repository</code>）的基础。</td><td align="left"><code>java @Component public class MyUtility &#123; // ... &#125;</code></td></tr><tr><td align="left"><code>@Service</code></td><td align="left"><strong>业务逻辑层 (Service) 注解</strong>。语义上更清晰，表明这是一个业务服务类。功能上与 <code>@Component</code> 相同。</td><td align="left"><code>java @Service public class UserServiceImpl implements UserService &#123; // ... &#125;</code></td></tr><tr><td align="left"><code>@Repository</code></td><td align="left"><strong>数据访问层 (DAO) 注解</strong>。用于标记数据访问组件。它除了具备 <code>@Component</code> 的功能外，还能将特定的数据访问异常（如 JDBC 异常）转译为 Spring 的统一数据访问异常。</td><td align="left"><code>java @Repository public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123; // ... &#125;</code></td></tr><tr><td align="left"><strong><code>@Autowired</code></strong></td><td align="left"><strong>按类型自动注入</strong>。Spring IoC 容器会自动查找匹配类型的 Bean 并注入。这是最常用的依赖注入注解。</td><td align="left"><code>java @Service public class OrderService &#123; @Autowired private UserService userService; // ... &#125;</code></td></tr><tr><td align="left"><code>@Resource</code></td><td align="left"><strong>按名称&#x2F;类型注入</strong>。Java EE 的标准 (JSR-250)。默认按名称注入，如果找不到，则按类型注入。功能强大且灵活。</td><td align="left"><code>java @Service public class ProductService &#123; @Resource private UserService userServiceImpl; // 注入名为&quot;userServiceImpl&quot;的Bean &#125;</code></td></tr><tr><td align="left"><code>@Qualifier</code></td><td align="left"><strong>指定注入的 Bean 名称</strong>。当同一类型有多个 Bean 实现时，与 <code>@Autowired</code> 配合使用，通过名称明确指定要注入哪一个。</td><td align="left"><code>java @Autowired @Qualifier(&quot;normalUserService&quot;) private UserService userService;</code></td></tr><tr><td align="left"><code>@Value</code></td><td align="left"><strong>注入配置文件中的值</strong>。用于从 <code>application.properties</code> 或 <code>application.yml</code> 文件中读取配置值。</td><td align="left"><code>java @Value(&quot;$&#123;server.port&#125;&quot;) private String serverPort;</code></td></tr></tbody></table><hr><h4 id="三、-Web-开发注解-Controller-层"><a href="#三、-Web-开发注解-Controller-层" class="headerlink" title="三、 Web 开发注解 (Controller 层)"></a>三、 Web 开发注解 (Controller 层)</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th><th align="left">核心示例</th></tr></thead><tbody><tr><td align="left"><strong><code>@RestController</code></strong></td><td align="left"><strong>声明 RESTful 控制器</strong>。一个复合注解，包含了 <code>@Controller</code> 和 <code>@ResponseBody</code>。表示这个类中的所有方法返回的都是 JSON&#x2F;XML 等数据，而不是视图（页面）。</td><td align="left"><code>java @RestController @RequestMapping(&quot;/api/users&quot;) public class UserController &#123; // ... &#125;</code></td></tr><tr><td align="left"><code>@Controller</code></td><td align="left"><strong>声明传统 MVC 控制器</strong>。用于返回视图（如 Thymeleaf 或 JSP 页面）的场景。</td><td align="left"><code>java @Controller public class PageController &#123; @GetMapping(&quot;/home&quot;) public String homePage() &#123; return &quot;index&quot;; // 返回 index.html 视图 &#125; &#125;</code></td></tr><tr><td align="left"><strong><code>@RequestMapping</code></strong></td><td align="left"><strong>路径映射</strong>。可以将 HTTP 请求映射到控制器的处理方法上。可以标注在类或方法上。</td><td align="left"><code>java @RestController @RequestMapping(&quot;/api/v1&quot;) // 类级别映射 public class ApiController &#123; @RequestMapping(&quot;/status&quot;) // 方法级别映射 public String getStatus()&#123; return &quot;OK&quot;; &#125; &#125;</code></td></tr><tr><td align="left"><code>@GetMapping</code></td><td align="left"><strong>处理 GET 请求</strong>。<code>@RequestMapping(method = RequestMethod.GET)</code> 的简写形式。</td><td align="left"><code>@GetMapping(&quot;/&#123;id&#125;&quot;)</code></td></tr><tr><td align="left"><code>@PostMapping</code></td><td align="left"><strong>处理 POST 请求</strong>。<code>@RequestMapping(method = RequestMethod.POST)</code> 的简写形式。</td><td align="left"><code>@PostMapping(&quot;/create&quot;)</code></td></tr><tr><td align="left"><code>@PutMapping</code></td><td align="left"><strong>处理 PUT 请求</strong>。<code>@RequestMapping(method = RequestMethod.PUT)</code> 的简写形式。</td><td align="left"><code>@PutMapping(&quot;/&#123;id&#125;&quot;)</code></td></tr><tr><td align="left"><code>@DeleteMapping</code></td><td align="left"><strong>处理 DELETE 请求</strong>。<code>@RequestMapping(method = RequestMethod.DELETE)</code> 的简写形式。</td><td align="left"><code>@DeleteMapping(&quot;/&#123;id&#125;&quot;)</code></td></tr><tr><td align="left"><strong><code>@PathVariable</code></strong></td><td align="left"><strong>获取路径参数</strong>。用于从 URL 路径中提取变量值（如 <code>/users/&#123;id&#125;</code> 中的 <code>id</code>）。</td><td align="left"><code>java @GetMapping(&quot;/&#123;userId&#125;&quot;) public User getUserById(@PathVariable Long userId) &#123; // ... &#125;</code></td></tr><tr><td align="left"><strong><code>@RequestParam</code></strong></td><td align="left"><strong>获取查询参数</strong>。用于从 URL 的查询字符串中获取参数（如 <code>/search?q=keyword</code> 中的 <code>q</code>）。</td><td align="left"><code>java @GetMapping(&quot;/search&quot;) public List&lt;User&gt; search(@RequestParam(&quot;keyword&quot;) String keyword) &#123; // ... &#125;</code></td></tr><tr><td align="left"><strong><code>@RequestBody</code></strong></td><td align="left"><strong>获取请求体数据</strong>。常用于 POST&#x2F;PUT 请求，将请求体中的 JSON&#x2F;XML 数据自动反序列化为 Java 对象。</td><td align="left"><code>java @PostMapping(&quot;/users&quot;) public User createUser(@RequestBody User user) &#123; // ... &#125;</code></td></tr><tr><td align="left"><code>@ResponseBody</code></td><td align="left"><strong>将返回值序列化为响应体</strong>。将方法的返回值（通常是 Java 对象）自动序列化为 JSON&#x2F;XML 格式，并写入 HTTP 响应体。<code>@RestController</code> 已默认包含此注解。</td><td align="left">(通常在 <code>@RestController</code> 中隐式使用)</td></tr></tbody></table><hr><h4 id="四、-数据访问与事务注解"><a href="#四、-数据访问与事务注解" class="headerlink" title="四、 数据访问与事务注解"></a>四、 数据访问与事务注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th><th align="left">核心示例</th></tr></thead><tbody><tr><td align="left"><strong><code>@Transactional</code></strong></td><td align="left"><strong>声明事务</strong>。可以标注在类或方法上。当标注在类上时，表示该类的所有 <code>public</code> 方法都将应用事务。可以配置隔离级别、传播行为等。</td><td align="left"><code>java @Service public class BankService &#123; @Transactional(propagation = Propagation.REQUIRED) public void transfer(Long fromId, Long toId, BigDecimal amount) &#123; // ...数据库操作 &#125; &#125;</code></td></tr><tr><td align="left"><code>@Entity</code></td><td align="left"><strong>JPA 实体类注解</strong>。表明这个类是一个实体类，它将映射到数据库中的一个表。</td><td align="left"><code>java @Entity @Table(name = &quot;t_user&quot;) public class User &#123; @Id private Long id; &#125;</code></td></tr><tr><td align="left"><code>@Table</code></td><td align="left"><strong>指定表名</strong>。与 <code>@Entity</code> 配合使用，指定实体类对应的数据库表名。</td><td align="left">(见 <code>@Entity</code> 示例)</td></tr><tr><td align="left"><code>@Id</code></td><td align="left"><strong>主键注解</strong>。指定实体类中的一个字段为数据库表的主键。</td><td align="left">(见 <code>@Entity</code> 示例)</td></tr><tr><td align="left"><code>@GeneratedValue</code></td><td align="left"><strong>主键生成策略</strong>。指定主键的生成方式，如自增 (<code>IDENTITY</code>)、序列 (<code>SEQUENCE</code>) 等。</td><td align="left"><code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code></td></tr><tr><td align="left"><code>@Column</code></td><td align="left"><strong>指定列名和属性</strong>。将实体类字段映射到数据库表的列，并可以定义列的属性（如名称、长度、是否允许为空等）。</td><td align="left"><code>@Column(name = &quot;user_name&quot;, nullable = false, length = 50)</code></td></tr></tbody></table><h4 id="五、-辅助与增强注解"><a href="#五、-辅助与增强注解" class="headerlink" title="五、 辅助与增强注解"></a>五、 辅助与增强注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th><th align="left">核心示例</th></tr></thead><tbody><tr><td align="left"><strong><code>@Slf4j</code> (Lombok)</strong></td><td align="left"><strong>自动生成日志对象</strong>。由 Lombok 库提供，在编译时会自动为类生成一个名为 <code>log</code> 的 <code>SLF4J</code> 日志对象，省去手动编写 <code>Logger log = LoggerFactory.getLogger(...)</code> 的样板代码。</td><td align="left"><code>java @Slf4j @Service public class MyService &#123; public void doSomething() &#123; log.info(&quot;Doing something...&quot;); &#125; &#125;</code></td></tr><tr><td align="left"><code>@Data</code> (Lombok)</td><td align="left">** Lombok 注解**。自动为类的所有字段生成 getter&#x2F;setter 方法、<code>toString()</code>, <code>equals()</code>, <code>hashCode()</code> 和一个无参构造函数。</td><td align="left"><code>java @Data public class UserDTO &#123; private String username; private String email; &#125;</code></td></tr><tr><td align="left"><code>@ConfigurationProperties</code></td><td align="left"><strong>类型安全的属性绑定</strong>。将配置文件 (<code>application.yml</code>) 中的一组属性值，自动绑定到一个 Java 类的字段上，实现强类型配置。</td><td align="left"><code>yaml my-app: name: &quot;My Awesome App&quot; version: &quot;1.0.0&quot; ``java @Component @ConfigurationProperties(prefix = &quot;my-app&quot;) @Data public class AppProperties &#123; private String name; private String version; &#125;</code></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MCP</title>
      <link href="/2025/05/23/MCP/"/>
      <url>/2025/05/23/MCP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Model Context Protocol 模型上下文协议。但却没有规定与模型如何进行交互，而是规定了 Host 和 Server 之间的交互，是让模型感知外部环境的协议，所以称为模型上下文协议，MCP规定了统一的工具发现和调用协议</strong></p><h2 id="MCP基础"><a href="#MCP基础" class="headerlink" title="MCP基础"></a>MCP基础</h2><h3 id="MCP-的用途"><a href="#MCP-的用途" class="headerlink" title="MCP 的用途"></a>MCP 的用途</h3><p>简单来说，MCP 是能够让大模型更好地调用各类工具的协议，大模型只能进行问答而无法主动调用外部工具，而 MCP 的出现使大模型拥有了使用各种外部工具的能力，这是很重要的一个能力，我们熟悉的 Cursor 本身就是一个 MCP Host</p><h3 id="MCP-server"><a href="#MCP-server" class="headerlink" title="MCP server"></a>MCP server</h3><p>一个符合 MCP 协议的可执行程序，通常由 python 和 node.js 编写，可以本地使用可以联网使用，我们可以帮它们理解成一个一个工具，每个工具可以解决一个具体问题，例如查询天气、查询新闻、查看文件夹… </p><img src="/img/mcp/2.png" /><h2 id="MCP-进阶"><a href="#MCP-进阶" class="headerlink" title="MCP 进阶"></a>MCP 进阶</h2><p>分析明白这段日志,就能理解 MCP 协议的内容了</p><h3 id="完整交互日志"><a href="#完整交互日志" class="headerlink" title="完整交互日志"></a>完整交互日志</h3><h4 id="初始化连接"><a href="#初始化连接" class="headerlink" title="初始化连接"></a>初始化连接</h4><p><strong>客户端请求：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;initialize&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocolVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-11-05&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clientInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cline&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.12.3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>服务器响应：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocolVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-11-05&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;prompts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;subscribe&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;listChanged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serverInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.6.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>初始化完成通知：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;notifications/initialized&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="查询工具列表"><a href="#查询工具列表" class="headerlink" title="查询工具列表"></a>查询工具列表</h4><p><strong>客户端请求：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>服务器响应：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_alerts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get weather alerts for a US state.\n\nArgs:\n    state: Two-letter US state code (e.g. CA, NY)\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inputSchema&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;State&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;state&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_alertsArguments&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_forecast&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get weather forecast for a location.\n\nArgs:\n    latitude: Latitude of the location\n    longitude: Longitude of the location\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inputSchema&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;latitude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Latitude&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;longitude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Longitude&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;latitude&quot;</span><span class="punctuation">,</span> <span class="string">&quot;longitude&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_forecastArguments&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="查询资源"><a href="#查询资源" class="headerlink" title="查询资源"></a>查询资源</h4><p><strong>查询资源列表：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>服务器响应（无资源）：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>查询资源模板：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/templates/list&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>服务器响应（无模板）：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resourceTemplates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="调用工具"><a href="#调用工具" class="headerlink" title="调用工具"></a>调用工具</h4><p><strong>调用天气预报工具：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools/call&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get_forecast&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;latitude&quot;</span><span class="punctuation">:</span> <span class="number">40.7128</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;longitude&quot;</span><span class="punctuation">:</span> <span class="number">-74.006</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>获取天气预报结果：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\nToday:\nTemperature: 64°F\nWind: 2 to 18 mph S\nForecast: Mostly sunny. High near 64, with temperatures falling to around 62 in the afternoon. South wind 2 to 18 mph, with gusts as high as 30 mph.\n\n---\n\nTonight:\nTemperature: 57°F\nWind: 12 to 17 mph S\nForecast: Mostly cloudy. Low around 57, with temperatures rising to around 59 overnight. South wind 12 to 17 mph, with gusts as high as 29 mph.\n\n---\n\nSaturday:\nTemperature: 78°F\nWind: 12 to 21 mph SW\nForecast: Partly sunny, with a high near 78. Southwest wind 12 to 21 mph, with gusts as high as 32 mph.\n\n---\n\nSaturday Night:\nTemperature: 57°F\nWind: 15 to 18 mph W\nForecast: A chance of rain showers between 8pm and 2am. Mostly cloudy. Low around 57, with temperatures rising to around 61 overnight. West wind 15 to 18 mph. Chance of precipitation is 30%.\n\n---\n\nSunday:\nTemperature: 62°F\nWind: 14 to 17 mph NW\nForecast: Partly sunny, with a high near 62. Northwest wind 14 to 17 mph.\n&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="日志详细解读"><a href="#日志详细解读" class="headerlink" title="日志详细解读"></a>日志详细解读</h3><p>上面这段日志完整地展示了一次MCP客户端与服务器的交互过程，我们来逐步分析：</p><h4 id="第一阶段：连接初始化"><a href="#第一阶段：连接初始化" class="headerlink" title="第一阶段：连接初始化"></a>第一阶段：连接初始化</h4><p><strong>客户端发起连接</strong>：</p><ul><li><code>method: &quot;initialize&quot;</code>：客户端请求初始化连接</li><li><code>protocolVersion: &quot;2024-11-05&quot;</code>：使用的MCP协议版本</li><li><code>clientInfo</code>：客户端信息，这里是Cline编辑器（版本3.12.3）</li><li><code>capabilities: &#123;&#125;</code>：客户端声明自己的能力（这里为空）</li></ul><p><strong>服务器响应</strong>：</p><ul><li><code>protocolVersion</code>：确认使用相同的协议版本</li><li><code>capabilities</code>：服务器能力声明<ul><li><code>tools</code>：支持工具功能，<code>listChanged: false</code> 表示工具列表不会动态变化</li><li><code>resources</code>：支持资源功能，但不支持订阅机制</li><li><code>prompts</code>：支持提示词功能</li></ul></li><li><code>serverInfo</code>：服务器信息，这是一个名为”weather”的天气服务器（版本1.6.0）</li></ul><p><strong>初始化完成通知</strong>：客户端告知服务器初始化已完成，可以开始正常通信。</p><h4 id="第二阶段：能力发现"><a href="#第二阶段：能力发现" class="headerlink" title="第二阶段：能力发现"></a>第二阶段：能力发现</h4><p><strong>请求工具列表</strong>：客户端查询服务器提供哪些工具。</p><p><strong>服务器返回工具列表</strong>：</p><ol><li><p><strong>get_alerts工具</strong>：</p><ul><li>功能：获取美国各州的天气警报</li><li>参数：<code>state</code>（必需），两位州代码（如CA、NY）</li></ul></li><li><p><strong>get_forecast工具</strong>：</p><ul><li>功能：获取指定位置的天气预报</li><li>参数：<code>latitude</code>和<code>longitude</code>（必需），地理坐标</li></ul></li></ol><p>每个工具都包含详细的<code>inputSchema</code>，定义了参数的类型和验证规则。</p><h4 id="第三阶段：资源查询"><a href="#第三阶段：资源查询" class="headerlink" title="第三阶段：资源查询"></a>第三阶段：资源查询</h4><p><strong>查询资源</strong>：客户端检查是否有可用的资源和资源模板，这个天气服务器没有提供任何资源。</p><h4 id="第四阶段：工具调用"><a href="#第四阶段：工具调用" class="headerlink" title="第四阶段：工具调用"></a>第四阶段：工具调用</h4><p><strong>调用天气预报工具</strong>：</p><ul><li>工具名称：<code>get_forecast</code></li><li>参数：纽约市的经纬度（40.7128, -74.006）</li></ul><p><strong>获取天气预报结果</strong>：</p><ul><li>返回详细的5天天气预报</li><li>包含温度、风速、天气状况等信息</li><li><code>isError: false</code> 表示调用成功</li></ul><h3 id="交互流程总结"><a href="#交互流程总结" class="headerlink" title="交互流程总结"></a>交互流程总结</h3><p>这个完整的MCP交互展示了标准的工作流程：</p><ol><li><strong>建立连接</strong>：协议版本协商，能力声明</li><li><strong>能力发现</strong>：查询可用工具、资源和模板</li><li><strong>工具调用</strong>：根据需要调用特定工具</li><li><strong>获取结果</strong>：接收处理结果并展示</li></ol><p>这种标准化的交互方式使得不同的客户端（如Cline、Claude Desktop）都能以相同的方式与各种MCP服务器通信，实现了良好的互操作性。</p><h3 id="关键技术细节"><a href="#关键技术细节" class="headerlink" title="关键技术细节"></a>关键技术细节</h3><ul><li><strong>JSON-RPC 2.0</strong>：使用标准的JSON-RPC协议进行通信</li><li><strong>请求ID</strong>：每个请求都有唯一ID，用于匹配请求和响应</li><li><strong>类型安全</strong>：通过JSON Schema严格定义参数类型</li><li><strong>错误处理</strong>：明确的错误状态和错误信息返回机制</li></ul><p>通过jsin schema 可以定义参数类型，从而实现类型安全，同时也可以通过错误信息返回机制来提示错误，从而实现错误处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uv - 下一代 Python 包管理工具</title>
      <link href="/2025/05/23/uv/"/>
      <url>/2025/05/23/uv/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>体验一下刚上线的 cloude 4.0</p></blockquote><h2 id="什么是-uv？"><a href="#什么是-uv？" class="headerlink" title="什么是 uv？"></a>什么是 uv？</h2><p>uv 是一个由 Astral 团队开发的现代化 Python 包管理工具，使用 Rust 编写，旨在成为 pip、pip-tools、pipx、poetry、pyenv、twine、virtualenv 等工具的一站式替代方案。它的设计目标是提供极快的性能、简洁的用户体验，以及与现有 Python 生态系统的完美兼容性。</p><h2 id="为什么选择-uv？"><a href="#为什么选择-uv？" class="headerlink" title="为什么选择 uv？"></a>为什么选择 uv？</h2><h3 id="🚀-极致性能"><a href="#🚀-极致性能" class="headerlink" title="🚀 极致性能"></a>🚀 极致性能</h3><ul><li><strong>10-100倍</strong> 比 pip 和 pip-tools 更快的依赖解析速度</li><li>使用 Rust 编写，天然的高性能优势</li><li>并行下载和安装，充分利用系统资源</li></ul><h3 id="🎯-简单易用"><a href="#🎯-简单易用" class="headerlink" title="🎯 简单易用"></a>🎯 简单易用</h3><ul><li>一个工具解决所有 Python 包管理需求</li><li>与现有工具兼容，无需修改现有工作流</li><li>直观的命令行界面</li></ul><h3 id="🔧-功能完整"><a href="#🔧-功能完整" class="headerlink" title="🔧 功能完整"></a>🔧 功能完整</h3><ul><li>包安装和管理</li><li>虚拟环境创建和管理</li><li>项目依赖管理</li><li>Python 版本管理</li><li>包发布功能</li></ul><h2 id="安装-uv"><a href="#安装-uv" class="headerlink" title="安装 uv"></a>安装 uv</h2><h3 id="macOS-和-Linux"><a href="#macOS-和-Linux" class="headerlink" title="macOS 和 Linux"></a>macOS 和 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用-pip-安装"><a href="#使用-pip-安装" class="headerlink" title="使用 pip 安装"></a>使用 pip 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><h3 id="使用-Homebrew-macOS"><a href="#使用-Homebrew-macOS" class="headerlink" title="使用 Homebrew (macOS)"></a>使用 Homebrew (macOS)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install uv</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建和管理虚拟环境"><a href="#创建和管理虚拟环境" class="headerlink" title="创建和管理虚拟环境"></a>创建和管理虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">uv venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境 (Linux/macOS)</span></span><br><span class="line"><span class="built_in">source</span> .venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境 (Windows)</span></span><br><span class="line">.venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建指定 Python 版本的虚拟环境</span></span><br><span class="line">uv venv --python 3.11</span><br></pre></td></tr></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装单个包</span></span><br><span class="line">uv pip install requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 requirements.txt 安装</span></span><br><span class="line">uv pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装开发依赖</span></span><br><span class="line">uv pip install -r requirements-dev.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步依赖（类似 pip-sync）</span></span><br><span class="line">uv pip <span class="built_in">sync</span> requirements.txt</span><br></pre></td></tr></table></figure><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化新项目</span></span><br><span class="line">uv init my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line">uv add requests</span><br><span class="line">uv add pytest --dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除依赖</span></span><br><span class="line">uv remove requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行脚本</span></span><br><span class="line">uv run script.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行命令</span></span><br><span class="line">uv run pytest</span><br></pre></td></tr></table></figure><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="Python-版本管理"><a href="#Python-版本管理" class="headerlink" title="Python 版本管理"></a>Python 版本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出可用的 Python 版本</span></span><br><span class="line">uv python list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装特定 Python 版本</span></span><br><span class="line">uv python install 3.11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用特定 Python 版本创建项目</span></span><br><span class="line">uv init --python 3.11 my-project</span><br></pre></td></tr></table></figure><h3 id="依赖锁定"><a href="#依赖锁定" class="headerlink" title="依赖锁定"></a>依赖锁定</h3><p>uv 自动生成 <code>uv.lock</code> 文件，确保跨环境的依赖一致性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新锁定文件</span></span><br><span class="line">uv lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从锁定文件安装</span></span><br><span class="line">uv <span class="built_in">sync</span></span><br></pre></td></tr></table></figure><h3 id="全局工具安装"><a href="#全局工具安装" class="headerlink" title="全局工具安装"></a>全局工具安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装全局工具</span></span><br><span class="line">uv tool install black</span><br><span class="line">uv tool install ruff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行全局工具</span></span><br><span class="line">uv tool run black .</span><br><span class="line">uv tool run ruff check .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的工具</span></span><br><span class="line">uv tool list</span><br></pre></td></tr></table></figure><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>根据官方基准测试，uv 在各种场景下都显著优于传统工具：</p><table><thead><tr><th>操作</th><th>pip</th><th>uv</th><th>性能提升</th></tr></thead><tbody><tr><td>安装 Django</td><td>1.5s</td><td>0.1s</td><td>15x</td></tr><tr><td>解析依赖</td><td>10s</td><td>0.5s</td><td>20x</td></tr><tr><td>创建虚拟环境</td><td>2s</td><td>0.1s</td><td>20x</td></tr></tbody></table><h2 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h2><h3 id="从-pip-pip-tools-迁移"><a href="#从-pip-pip-tools-迁移" class="headerlink" title="从 pip + pip-tools 迁移"></a>从 pip + pip-tools 迁移</h3><p>如果你现在使用 pip 和 pip-tools：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换 pip-compile</span></span><br><span class="line">uv pip compile requirements.in</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 pip-sync</span></span><br><span class="line">uv pip <span class="built_in">sync</span> requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 pip install</span></span><br><span class="line">uv pip install package-name</span><br></pre></td></tr></table></figure><h3 id="从-Poetry-迁移"><a href="#从-Poetry-迁移" class="headerlink" title="从 Poetry 迁移"></a>从 Poetry 迁移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 pyproject.toml 转换为 uv 格式</span></span><br><span class="line">uv init --from-poetry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">uv <span class="built_in">sync</span></span><br></pre></td></tr></table></figure><h3 id="从-Pipenv-迁移"><a href="#从-Pipenv-迁移" class="headerlink" title="从 Pipenv 迁移"></a>从 Pipenv 迁移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Pipfile 生成 requirements.txt</span></span><br><span class="line">pipenv requirements &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 uv 安装</span></span><br><span class="line">uv pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="配置和定制"><a href="#配置和定制" class="headerlink" title="配置和定制"></a>配置和定制</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>uv 支持多种配置方式：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml</span></span><br><span class="line"><span class="section">[tool.uv]</span></span><br><span class="line"><span class="attr">index-url</span> = <span class="string">&quot;https://pypi.org/simple&quot;</span></span><br><span class="line"><span class="attr">extra-index-url</span> = [<span class="string">&quot;https://my-custom-index.com/simple&quot;</span>]</span><br><span class="line"><span class="attr">trusted-host</span> = [<span class="string">&quot;my-custom-index.com&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置索引 URL</span></span><br><span class="line"><span class="built_in">export</span> UV_INDEX_URL=<span class="string">&quot;https://pypi.org/simple&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缓存目录</span></span><br><span class="line"><span class="built_in">export</span> UV_CACHE_DIR=<span class="string">&quot;/path/to/cache&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用网络访问</span></span><br><span class="line"><span class="built_in">export</span> UV_OFFLINE=1</span><br></pre></td></tr></table></figure><h2 id="与-CI-CD-集成"><a href="#与-CI-CD-集成" class="headerlink" title="与 CI&#x2F;CD 集成"></a>与 CI&#x2F;CD 集成</h2><h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">uv</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">astral-sh/setup-uv@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">uv</span> <span class="string">python</span> <span class="string">install</span> <span class="number">3.11</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">uv</span> <span class="string">sync</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">uv</span> <span class="string">run</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 uv</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> uv <span class="built_in">sync</span> --frozen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行应用</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;uv&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-使用项目模式"><a href="#1-使用项目模式" class="headerlink" title="1. 使用项目模式"></a>1. 使用项目模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 始终在项目根目录初始化</span></span><br><span class="line">uv init .</span><br></pre></td></tr></table></figure><h3 id="2-锁定依赖版本"><a href="#2-锁定依赖版本" class="headerlink" title="2. 锁定依赖版本"></a>2. 锁定依赖版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定期更新锁定文件</span></span><br><span class="line">uv lock --upgrade</span><br></pre></td></tr></table></figure><h3 id="3-分离开发和生产依赖"><a href="#3-分离开发和生产依赖" class="headerlink" title="3. 分离开发和生产依赖"></a>3. 分离开发和生产依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加开发依赖</span></span><br><span class="line">uv add pytest --dev</span><br><span class="line">uv add black --dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产环境只安装核心依赖</span></span><br><span class="line">uv <span class="built_in">sync</span> --no-dev</span><br></pre></td></tr></table></figure><h3 id="4-使用工具管理"><a href="#4-使用工具管理" class="headerlink" title="4. 使用工具管理"></a>4. 使用工具管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装常用工具</span></span><br><span class="line">uv tool install ruff</span><br><span class="line">uv tool install black</span><br><span class="line">uv tool install mypy</span><br></pre></td></tr></table></figure><h2 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h2><h3 id="Q-uv-与-pip-兼容吗？"><a href="#Q-uv-与-pip-兼容吗？" class="headerlink" title="Q: uv 与 pip 兼容吗？"></a>Q: uv 与 pip 兼容吗？</h3><p>A: 是的，uv 完全兼容 pip 的接口和 requirements.txt 格式。</p><h3 id="Q-可以在现有项目中使用-uv-吗？"><a href="#Q-可以在现有项目中使用-uv-吗？" class="headerlink" title="Q: 可以在现有项目中使用 uv 吗？"></a>Q: 可以在现有项目中使用 uv 吗？</h3><p>A: 当然可以，uv 可以无缝替换现有的 pip 工作流。</p><h3 id="Q-uv-支持私有仓库吗？"><a href="#Q-uv-支持私有仓库吗？" class="headerlink" title="Q: uv 支持私有仓库吗？"></a>Q: uv 支持私有仓库吗？</h3><p>A: 支持，可以通过配置自定义索引 URL 来使用私有仓库。</p><h3 id="Q-uv-的缓存在哪里？"><a href="#Q-uv-的缓存在哪里？" class="headerlink" title="Q: uv 的缓存在哪里？"></a>Q: uv 的缓存在哪里？</h3><p>A: 默认在 <code>~/.cache/uv</code>，可以通过环境变量 <code>UV_CACHE_DIR</code> 自定义。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>uv 代表了 Python 包管理工具的未来方向。它不仅提供了卓越的性能，还简化了 Python 开发者的日常工作流程。无论你是新手还是经验丰富的开发者，uv 都能帮你更高效地管理 Python 项目。</p><p>如果你还在使用传统的 pip 或其他包管理工具，强烈建议尝试 uv。它的速度和便利性会让你的开发体验焕然一新。</p><hr><p><em>想了解更多 uv 的使用技巧？访问 <a href="https://docs.astral.sh/uv/">官方文档</a> 获取最新信息。</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringAI</title>
      <link href="/2025/05/16/SpringAI/"/>
      <url>/2025/05/16/SpringAI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-AI-应用集成框架"><a href="#Spring-AI-应用集成框架" class="headerlink" title="Spring AI 应用集成框架"></a>Spring AI 应用集成框架</h1><p>基于 Spring Boot 的大模型应用集成框架，作为后 Java 时代的关键一环，旨在简化大模型在应用中的集成与开发，撼动了 Python 语言在 AI 工程领域的主导地位。</p><img src="/img/SpringAI/1.png"/><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><ul><li>统一的 API 调用接口，支持多种大模型</li><li>基于 Spring Boot 自动配置，简化配置</li><li>提供<code>PromptTemplate</code> 和结构化提示管理</li><li>支持流式响应处理<br>SpringAI 利用 AOP 原理提供 AI 会话流程的拦截和增强，实现 AroundAdvisors ，基于此可以方便管理对话日志，及上下文记忆。</li></ul><img src="/img/SpringAI/2.png"/><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>基于 SpringBoot 快速上手体验 SpringAI 的便利功能。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Java 17+</li><li>Spring Boot 3.0+</li><li>大模型 api-key</li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>可以通过新建 Spring Boot 脚手架，自动引入 SpringAI 依赖：<br><img src="/img/SpringAI/3.png"/> </p><p>也可以手动引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-starter-model-openai<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  ---选择你要用的大模型</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Application-yml"><a href="#配置-Application-yml" class="headerlink" title="配置 Application.yml"></a>配置 Application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">SpringAI</span></span><br><span class="line">    <span class="attr">ai:</span></span><br><span class="line">      <span class="attr">openai:</span></span><br><span class="line">          <span class="attr">base-url:</span> <span class="string">https://api.openai-hub.com</span>  <span class="string">---</span> <span class="string">实际调用地址</span></span><br><span class="line">          <span class="attr">api-key:</span> <span class="string">$&#123;OPENAI_API_KEY&#125;</span>   <span class="string">---</span> <span class="string">填入你的</span> <span class="string">api-key</span></span><br><span class="line">          <span class="attr">chat:</span> <span class="string">---</span> <span class="string">以</span> <span class="string">chat</span> <span class="string">模式为例</span></span><br><span class="line">             <span class="attr">model:</span> <span class="string">gpt-4.1</span></span><br></pre></td></tr></table></figure><h3 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h3><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatClient <span class="title function_">chatClient</span><span class="params">(OpenAiChatModel chatModel)</span> &#123; <span class="comment">// 注入 OpenAiChatModel</span></span><br><span class="line">        <span class="keyword">return</span> ChatClient.builder(chatModel)</span><br><span class="line">                .defaultSystem(<span class="string">&quot;You are a helpful assistant.&quot;</span>)  <span class="comment">//设置默认系统提示</span></span><br><span class="line">                .build();   <span class="comment">//使用工厂方法创建 Client</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/chat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatClient chatClient;</span><br><span class="line">    <span class="meta">@RequestMapping(produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">chat</span><span class="params">(String prompt)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  chatClient.prompt()</span><br><span class="line">                .user(prompt)</span><br><span class="line">                .stream()  <span class="comment">// 开启流式响应   -- 阻塞调用 .call()</span></span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>值得一提的是，流式输出格式默认为为<code>text/event-stream</code>格式，我们可以修改 RequestMapping 的 produces 来指定输出格式。</p></blockquote><h3 id="启动项目测试"><a href="#启动项目测试" class="headerlink" title="启动项目测试"></a>启动项目测试</h3><p>启动项目，访问 <a href="http://localhost:8080/chat?prompt=hello">http://localhost:8080/chat?prompt=hello</a><br>可以看到大模型返回的内容。<br><img src="/img/SpringAI/4.png"/></p>]]></content>
      
      
      
        <tags>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打破闭源限制 即时获取音乐媒体源</title>
      <link href="/2025/05/15/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%AA%92%E4%BD%93API/"/>
      <url>/2025/05/15/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%AA%92%E4%BD%93API/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>已被官方光速修复 </p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在我开发工作中一直有调用音乐平台 API 获取音乐的需求，但是 <code>网易云</code> 和 <code>QQ 音乐</code> 的 API 现在只对企业开放申请，个人开发者已经无法使用，之前 Github 上 30k star 的项目 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">NCMApi</a> 也已被网易起诉停止维护，令人唏嘘；找遍全网也没有什么好办法了，好在经过一些摸索，我也算歪打正着通过字节旗下的汽水音乐实现了获取音乐的功能。</p></blockquote><h3 id="NCMApi-停止维护"><a href="#NCMApi-停止维护" class="headerlink" title="NCMApi 停止维护"></a>NCMApi 停止维护</h3><img src="/img/musicAPI/1.png"><h3 id="当前音乐获取的实现"><a href="#当前音乐获取的实现" class="headerlink" title="当前音乐获取的实现"></a>当前音乐获取的实现</h3><img src="/img/musicAPI/2.png"><blockquote><p>我已将基于 demo 代码推送至 GitHub 仓库。不出意外很快会推出 Java 版本实现，并将持续优化封装程度，若该方法对你有所帮助，希望可以 star 支持，谢谢！<br><code>免责申明</code>： 本项目仅供学习参考，切勿用于商业用途，如产生任何纠纷与作者无关。</p></blockquote><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>讲一下我是怎么误打误撞实现的。 💦💦</p><p>首先，主流的音乐平台，如网易云音乐、QQ 音乐，都已经不再向个人开发者提供 API 服务，这意味着你无法通过调用这些平台的 API 获取音乐文件。查找了很多第三方 API 平台的接口，也都无法正常使用 (如果你知道还有什么适用的方案，欢迎留言)。</p><p>但是在一个无人问津接近废弃的 <a href="https://api.ilingku.com/doc/dg_qishui.html">API 平台</a>上，可以通过 <code>音乐名字</code> 查找到汽水平台下这个音乐的 <code>ID</code> <code>封面</code> 以及其他基础信息。<br><img src="/img/musicAPI/3.png"></p><p>只是 <code>RequestBody</code> 中的 <code>n</code> 和 <code>track_id</code> 字段已经不再适用了，返回体也不再会返回歌曲的播放链接。不过好消息是依旧可以通过这个API 获取到歌曲的 <code>track_id</code> 信息。</p><p>之前做过网易云音乐的类似的工作，也就是我博客中音乐页面的播放实现，通常来讲只要拿到歌曲的 <code>ID</code> 再到音乐平台网页上按照网址规定的格式拼接就可以进入音乐的播放页面。但是汽水音乐的 Web 网页已经不再维护了(可能就从来没有过)，如今搜索<a href="https://www.douyin.com/qishui?from_page=musician-home">汽水音乐的网址</a> 只会跳转到其应用下载页面。拿到 id 打不开歌曲的播放页面也没用，这时候我就破罐子破摔地蒙了一下它的请求方法 <a href="http://www.xxxx/track?track_id=">www.xxxx/track?track_id=</a> ，结果还真蒙中了，顺利来到下面这个页面</p><img src="/img/musicAPI/4.png">只是在这个页面中，你点击下载，他还是会给你跳转到应用下载页面。不过既然这个页面能播放歌曲就一定有播放媒体加载。<p><code>F12</code> 打开浏览器开发者工具，选中 <code>Network</code> 中的媒体，刷新页面，确实是有一个媒体被加载，而调用程序就是页面本身。<br><img src="/img/musicAPI/5.png"></p><p>所以我只需要，把这个页面的文件下载下来，在 IDE 中 Ctrl + F 搜索 <code>luna.douyinvod.com</code> 这个关键字段 ，确实存在这个媒体的加载地址，只需要在本地发送网络请求下载就好了。<br><img src="/img/musicAPI/6.png"></p><p>一切可行，剩下就是 VibeCoding 了 💦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2025/05/07/API/"/>
      <url>/2025/05/07/API/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Representational State Transfer (REST) 是一种软件架构风格，用于设计网络应用程序的接口。RESTful API 是基于 REST 架构风格的 API 设计。  </p></blockquote><h1 id="Representational"><a href="#Representational" class="headerlink" title="Representational"></a>Representational</h1><p>资源的表现形式,<strong>描述数据的数据</strong>，元数据。  </p><h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><ul><li>GET: 服务端查询数据并返回至客户端</li><li>POST: 客户端产生数据发送至服务端，服务端新增并保存</li><li>PUT: 客户端更新服务端资源</li><li>DELETE: 客户端希望删除服务端的资源</li><li>…</li></ul><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span>    /classes：列出所有班级</span><br><span class="line"><span class="variable constant_">POST</span>   /classes：新建一个班级</span><br><span class="line"><span class="variable constant_">GET</span>    /classes/&#123;classId&#125;：获取某个指定班级的信息</span><br><span class="line"><span class="variable constant_">PUT</span>    /classes/&#123;classId&#125;：更新某个指定班级的信息（一般倾向整体更新）</span><br><span class="line"><span class="variable constant_">PATCH</span>  /classes/&#123;classId&#125;：更新某个指定班级的信息（一般倾向部分更新）</span><br><span class="line"><span class="variable constant_">DELETE</span> /classes/&#123;classId&#125;：删除某个班级</span><br><span class="line"><span class="variable constant_">GET</span>    /classes/&#123;classId&#125;/teachers：列出某个指定班级的所有老师的信息</span><br><span class="line"><span class="variable constant_">GET</span>    /classes/&#123;classId&#125;/students：列出某个指定班级的所有学生的信息</span><br><span class="line"><span class="variable constant_">DELETE</span> /classes/&#123;classId&#125;/teachers/&#123;<span class="variable constant_">ID</span>&#125;：删除某个指定班级下的指定的老师的信息</span><br></pre></td></tr></table></figure><h2 id="content-type"><a href="#content-type" class="headerlink" title="content-type"></a>content-type</h2><p>描述数据的类型。</p><ul><li>application&#x2F;json</li><li>application&#x2F;xml</li><li>text&#x2F;plain </li><li>…</li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><ul><li>200: OK</li><li>201: Created</li><li>204: No Content</li><li>400: Bad Request</li><li>401: Unauthorized</li><li>403: Forbidden</li><li>404: Not Found</li><li>500: Internal Server Error</li><li>503: Service Unavailable<br>-…</li></ul><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>数据本身，资源。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text=<span class="string">&quot;hello world&quot;</span></span><br><span class="line">json=<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">&#125;</span></span><br><span class="line">xml=&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;<span class="number">30</span>&lt;/age&gt;&lt;/person&gt;</span><br></pre></td></tr></table></figure><div style="text-align: center;">  <img src="/img/API/2.png" /></div>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节 AIGCStylizeImage API 调用文档</title>
      <link href="/2025/05/04/volcengine-api-doc/"/>
      <url>/2025/05/04/volcengine-api-doc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字节-AIGCStylizeImage-API-调用文档"><a href="#字节-AIGCStylizeImage-API-调用文档" class="headerlink" title="字节 AIGCStylizeImage API 调用文档"></a>字节 AIGCStylizeImage API 调用文档</h1><p>整合并简化了字节官网的 API 接入文档，从注册账号到跑通，一定可以加快你的上手速度，<strong>实际工程调用实例可以直接跳转到最后一个目录单元</strong>。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><a href="https://console.volcengine.com/ark/region:ark+cn-beijing/model/detail?Id=doubao-i2i-style&projectName=undefined">火山引擎官网</a>， 注册账号并完成实名认证，在下拉栏中选择 API访问密钥，按指引创建密钥，获取必要的 <code>ak</code> 、<code>sk</code>。</p><img src="/img/api_1.jpg" />返回刚刚的页面，开通 Doubao—AIGC图像风格化模型，可以看到以下界面：<img src="/img/api_2.png" /><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p><a href="https://www.volcengine.com/docs/6791/1314297">官方文档</a></p><h3 id="必要请求参数"><a href="#必要请求参数" class="headerlink" title="必要请求参数"></a>必要请求参数</h3><blockquote><p>  注意：url 和 base64 二选一即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;req_key&quot;</span>: <span class="string">&quot;img2img_disney_3d_style&quot;</span>, <span class="comment">#指定的风格</span></span><br><span class="line">  <span class="string">&quot;sub_req_key&quot;</span>:<span class="string">&quot;&quot;</span>   <span class="comment"># !!! 根据情况选择 看后文对 sub_req_key 的解释 </span></span><br><span class="line">    <span class="string">&quot;image_urls&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://xxx&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="string">&quot;binary_data_base64&quot;</span>: [</span><br><span class="line">      <span class="comment">#处理过的图片 base64编码 </span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;return_url&quot;</span>: true,</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="req-key"><a href="#req-key" class="headerlink" title="req_key"></a>req_key</h4><p>指定的风格，即 <code>req_key</code> 可选参数如下（代码块可展开）：                       </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">网红日漫风：img2img_ghibli_style</span><br><span class="line"></span><br><span class="line">3D风: img2img_disney_3d_style</span><br><span class="line"></span><br><span class="line">写实风：img2img_real_mix_style</span><br><span class="line"></span><br><span class="line">天使风：img2img_pastel_boys_style</span><br><span class="line"></span><br><span class="line">动漫风：img2img_cartoon_style</span><br><span class="line"></span><br><span class="line">日漫风：img2img_makoto_style</span><br><span class="line"></span><br><span class="line">公主风：img2img_rev_animated_style</span><br><span class="line"></span><br><span class="line">梦幻风：img2img_blueline_style</span><br><span class="line"></span><br><span class="line">水墨风：img2img_water_ink_style</span><br><span class="line"></span><br><span class="line">新莫奈花园: i2i_ai_create_monet</span><br><span class="line"></span><br><span class="line">水彩风：img2img_water_paint_style</span><br><span class="line"></span><br><span class="line">莫奈花园：img2img_comic_style</span><br><span class="line"></span><br><span class="line">精致美漫：img2img_comic_style</span><br><span class="line"></span><br><span class="line">赛博机械：img2img_comic_style</span><br><span class="line"></span><br><span class="line">精致韩漫：img2img_exquisite_style</span><br><span class="line"></span><br><span class="line">国风-水墨：img2img_pretty_style</span><br><span class="line"></span><br><span class="line">浪漫光影：img2img_pretty_style</span><br><span class="line"></span><br><span class="line">陶瓷娃娃：img2img_ceramics_style</span><br><span class="line"></span><br><span class="line">中国红：img2img_chinese_style</span><br><span class="line"></span><br><span class="line">丑萌粘土：img2img_clay_style</span><br><span class="line"></span><br><span class="line">可爱玩偶：img2img_clay_style</span><br><span class="line"></span><br><span class="line">3D-游戏_Z时代：img2img_3d_style</span><br><span class="line"></span><br><span class="line">动画电影：img2img_3d_style</span><br><span class="line"></span><br><span class="line">玩偶：img2img_3d_style  </span><br></pre></td></tr></table></figure><h4 id="sub-req-key"><a href="#sub-req-key" class="headerlink" title="sub_req_key"></a>sub_req_key</h4><p>目的是区分大风格下的分支风格，<strong>只有部分风格需要这个参数，其余风格不需要传参</strong>  </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">莫奈花园：img2img_comic_style_monet</span><br><span class="line"></span><br><span class="line">精致美漫：img2img_comic_style_marvel</span><br><span class="line"></span><br><span class="line">赛博机械：img2img_comic_style_future</span><br><span class="line"></span><br><span class="line">国风-水墨：img2img_pretty_style_ink</span><br><span class="line"></span><br><span class="line">浪漫光影：img2img_pretty_style_light</span><br><span class="line"></span><br><span class="line">丑萌粘土：img2img_clay_style_3d</span><br><span class="line"></span><br><span class="line">可爱玩偶：img2img_clay_style_bubble</span><br><span class="line"></span><br><span class="line">3D-游戏_Z时代：img2img_3d_style_era</span><br><span class="line"></span><br><span class="line">动画电影：img2img_3d_style_movie</span><br><span class="line"></span><br><span class="line">玩偶：img2img_3d_style_doll  </span><br></pre></td></tr></table></figure><h3 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algorithm_base_resp&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;status_code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;status_message&quot;</span>: <span class="string">&quot;Success&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;binary_data_base64&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;/9xxx&quot;</span>,  <span class="comment">#重点关注此返回，转换后的图片Base64</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;image_urls&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;https://xxx&quot;</span> <span class="comment">#重点关注此返回，转换后的图片url</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">#.... 其他不重要的返回数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request_id&quot;</span>: <span class="string">&quot;202405201722544E4A22904AB5C20B42D5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">&quot;time_elapsed&quot;</span>: <span class="string">&quot;5.849820164s&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><p>可以借助 <a href="https://api.volcengine.com/api-explorer?action=AIGCStylizeImage&data=%7B%7D&groupName=%E4%BA%BA%E5%83%8F%E4%BA%BA%E4%BD%93%E5%85%AC%E6%B5%8B&query=%7B%7D&serviceCode=cv&tab=signTool&version=2024-06-06&tab_sdk=PYTHON">签名工具</a>获取签名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /?Action=CVProcess&amp;Version=<span class="number">2022</span>-08-<span class="number">31</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: visual.volcengineapi.com</span><br><span class="line">Content-<span class="type">Type</span>: application/json; charset=UTF-<span class="number">8</span></span><br><span class="line">X-Date: 20241120T122058Z</span><br><span class="line">X-Content-Sha256: 287e874e******d653b44d21e</span><br><span class="line">Authorization: HMAC-SHA256 Credential=Adfks******wekfwe/<span class="number">20241120</span>/cn-beijing/cv/request, SignedHeaders=host;x-content-sha256;x-date, Signature=47a7d934ff7b37c03938******cd7b8278a40a1057690c401e92246a0e41085f</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;req_key&quot;</span>: <span class="string">&quot;img2img_disney_3d_style&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image_urls&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://xxx&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;return_url&quot;</span>: true,</span><br><span class="line">    <span class="string">&quot;logo_info&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;add_logo&quot;</span>: true,</span><br><span class="line">        <span class="string">&quot;position&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;logo_text_content&quot;</span>: <span class="string">&quot;这里是明水印内容&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可使用字节提供的 SDK <strong>（强烈推荐这个方式）</strong></p><h2 id="SDK-的使用-（强烈推荐）"><a href="#SDK-的使用-（强烈推荐）" class="headerlink" title="SDK 的使用 （强烈推荐）"></a>SDK 的使用 （强烈推荐）</h2><blockquote><p>  以 <code>python</code>为例，其他语言可以去<a href="https://www.volcengine.com/docs/6444/1340578#0f05efc9">官网</a>自行查阅</p></blockquote><p>手动下载工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install volcengine-python-sdk==2.0.1</span><br><span class="line">pip install volcengine</span><br></pre></td></tr></table></figure><p>实例调用代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> volcengine.visual.VisualService <span class="keyword">import</span> VisualService</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    visual_service = VisualService()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># call below method if you don&#x27;t set ak and sk in $HOME/.volc/config</span></span><br><span class="line">    visual_service.set_ak(<span class="string">&#x27;your ak&#x27;</span>)</span><br><span class="line">    visual_service.set_sk(<span class="string">&#x27;your sk&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 请求Body(查看接口文档请求参数-请求示例，将请求参数内容复制到此)</span></span><br><span class="line">    form = &#123;</span><br><span class="line">        <span class="string">&quot;req_key&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp = visual_service.cv_process(form)</span><br><span class="line">    <span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure><h1 id="调用实例"><a href="#调用实例" class="headerlink" title="调用实例"></a>调用实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> volcengine.visual.VisualService <span class="keyword">import</span> VisualService</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    visual_service = VisualService()</span><br><span class="line">    visual_service.set_ak(<span class="string">&#x27;你的 ak&#x27;</span>) <span class="comment">#自行配置</span></span><br><span class="line">    visual_service.set_sk(<span class="string">&#x27;你的 sk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    input_folder = <span class="string">&quot;你的文件夹&quot;</span> <span class="comment">#自行配置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(input_folder):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输入文件夹 <span class="subst">&#123;input_folder&#125;</span> 不存在&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 doubao_output 文件夹</span></span><br><span class="line">    output_folder = <span class="string">&#x27;doubao_output&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_folder):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith((<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>)):</span><br><span class="line">            image_path = os.path.join(input_folder, filename)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> image_file:</span><br><span class="line">                    image_bytes = image_file.read()</span><br><span class="line">                    encoded_image = base64.b64encode(image_bytes).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                form = &#123;</span><br><span class="line">                    <span class="string">&quot;req_key&quot;</span>: <span class="string">&quot;img2img_water_ink_style&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;binary_data_base64&quot;</span>: [encoded_image],</span><br><span class="line">                    <span class="string">&quot;return_url&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                resp = visual_service.cv_process(form)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;filename&#125;</span> 的响应: <span class="subst">&#123;resp&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;data&#x27;</span> <span class="keyword">in</span> resp <span class="keyword">and</span> <span class="string">&#x27;image_urls&#x27;</span> <span class="keyword">in</span> resp[<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">for</span> index, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(resp[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;image_urls&#x27;</span>]):</span><br><span class="line">                        clean_url = url.strip(<span class="string">&#x27; `&#x27;</span>)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            response = requests.get(clean_url)</span><br><span class="line">                            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                                new_filename = <span class="string">f&quot;db_<span class="subst">&#123;filename&#125;</span>&quot;</span></span><br><span class="line">                                file_path = os.path.join(output_folder, new_filename)</span><br><span class="line">                                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                                    f.write(response.content)</span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">f&#x27;图片 <span class="subst">&#123;new_filename&#125;</span> 已保存到 <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">f&#x27;下载图片 <span class="subst">&#123;clean_url&#125;</span> 失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&#x27;</span>)</span><br><span class="line">                        <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&#x27;下载图片 <span class="subst">&#123;clean_url&#125;</span> 时发生错误: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;filename&#125;</span> 时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果展示：</p><img src="/img/api_3.png" />]]></content>
      
      
      
        <tags>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段工作总结</title>
      <link href="/2025/05/02/%E9%98%B6%E6%AE%B5%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2025/05/02/%E9%98%B6%E6%AE%B5%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="人脸风格化可行性方案"><a href="#人脸风格化可行性方案" class="headerlink" title="人脸风格化可行性方案"></a>人脸风格化可行性方案</h1><blockquote><p>  目前路线为 多数据源启动数据，小样本训练 Lora 后，使用数据合成循环管道，不断过滤优化数据，生成大量数据，最终训练出高质量的指令引导的人脸风格化模型</p></blockquote><img src="/img/work/1.jpg"/><h2 id="一、现有开源工具生成"><a href="#一、现有开源工具生成" class="headerlink" title="一、现有开源工具生成"></a>一、现有开源工具生成</h2><h3 id="1、通过-EasyControl-生成-Ghibli-风格的人脸数据"><a href="#1、通过-EasyControl-生成-Ghibli-风格的人脸数据" class="headerlink" title="1、通过 EasyControl 生成 Ghibli 风格的人脸数据"></a>1、通过 EasyControl 生成 Ghibli 风格的人脸数据</h3><p><a href="https://github.com/Xiaojiu-z/EasyControl">https://github.com/Xiaojiu-z/EasyControl</a></p><h3 id="2、通过-豆包-生成部分风格数据"><a href="#2、通过-豆包-生成部分风格数据" class="headerlink" title="2、通过 豆包 生成部分风格数据"></a>2、通过 豆包 生成部分风格数据</h3><blockquote><p>  还需注意是否开源、开源协议</p></blockquote><p>例如 <code>3D动漫、插画、绘本</code> … 均有不错的表现</p><h3 id="3、通过-HiDream-I1-生成数据"><a href="#3、通过-HiDream-I1-生成数据" class="headerlink" title="3、通过 HiDream-I1 生成数据"></a>3、通过 HiDream-I1 生成数据</h3><p><a href="https://github.com/HiDream-ai/HiDream-I1">https://github.com/HiDream-ai/HiDream-I1</a></p><p>在线测试，风格化后均为半身照，这意味着只能专门处理半身人像</p><p>部署显存需 <code>70GB</code> 以上，待实验</p><h3 id="Step-1X"><a href="#Step-1X" class="headerlink" title="Step-1X"></a>Step-1X</h3><p><a href="https://huggingface.co/stepfun-ai/Step1X-Edit">https://huggingface.co/stepfun-ai/Step1X-Edit</a></p><p>以 Ghibli 风格图像为 Bridge 可以得到较好的风格化效果，不过受 Ghibli 影响较大</p><h3 id="4、SD-3-5"><a href="#4、SD-3-5" class="headerlink" title="4、SD 3.5"></a>4、SD 3.5</h3><p><a href="https://platform.stability.ai/">https://platform.stability.ai/</a></p><p>在以往实验中，SD 3.5 生成其预设的风格能力还是非常不错的，例如<code>pixel、cyberpunk</code>，不过模型还<strong>没有开源</strong></p><h2 id="二、Multi-Control-面部解偶-deStyle"><a href="#二、Multi-Control-面部解偶-deStyle" class="headerlink" title="二、Multi_Control 面部解偶 deStyle"></a>二、Multi_Control 面部解偶 deStyle</h2><blockquote><p>  数据生成步骤中的 <code>核心创新点 </code></p></blockquote><p>使用 FLUX+ControlNet 为base，通过分别提取人脸和背景 canny，同时设有不同的权重，通过 prompt 引导实现已风格化图像的去风格化任务。</p><p>基于现有实验拟定的<strong>最佳组合参数</strong>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">control_image=[</span><br><span class="line">    control_image_pose,</span><br><span class="line">    control_image_canny, <span class="comment">#background</span></span><br><span class="line">    control_image_canny_face,</span><br><span class="line">    <span class="comment"># control_image_depth</span></span><br><span class="line">    ], </span><br><span class="line">controlnet_conditioning_scale=[<span class="number">0.33</span>,<span class="number">0.5</span>,<span class="number">0.3</span>],</span><br><span class="line">control_guidance_end=[<span class="number">0.3</span>,<span class="number">0.8</span>,<span class="number">0.65</span>],</span><br><span class="line">num_inference_steps=<span class="number">45</span>,</span><br><span class="line">guidance_scale=<span class="number">8</span>,</span><br></pre></td></tr></table></figure><h3 id="尝试过的部分失败组合"><a href="#尝试过的部分失败组合" class="headerlink" title="尝试过的部分失败组合"></a>尝试过的部分失败组合</h3><ul><li><p>Pose + Canny_backgroud , 缺少面部信息，模型生成面部内容质量很低</p></li><li><p>Canny_face + Canny_backgrond , 缺少 <code>Pose</code> 的引导与平衡，<code>Canny</code> 完全占主导地位，效果不佳</p></li><li><p>…+ Depth , 高权重下 <code>Depth</code> 的阴影部分严重影响生成图片的背景，使背景变暗，低权重几乎没有作用</p></li></ul><h3 id="当前组合下的几个疑难点"><a href="#当前组合下的几个疑难点" class="headerlink" title="当前组合下的几个疑难点"></a>当前组合下的几个疑难点</h3><ul><li><p>由于目前仅基于 FFHQ 数据集测试，均为人脸或小半身人脸，且于 <code>Canny</code> 控制下 <code>Pose</code> 作用甚微，主要起补充信息作用，后续若扩张为半身人像或全身人像，该参数可能需重新考虑</p></li><li><p>Double Canny 权重拮抗，若人脸 <code>canny</code> 权重高于背景，则可能会出现过拟合的状态，<code>eg：Ghibli 的大眼睛</code>，若背景 <code>canny</code> 权重高于人脸，则可能会出现丢失面部内容信息，所以这两个参数还需不断测试，或探索别的办法来解决这一问题</p></li><li><p>prompt 质量严重影响生成质量，这是最让我头疼的一点，同样参数下，不同的 <code>prompt</code> 产出的内容质量差别不小，个人认为 <code>prompt</code> 中应至少含有以下几点信息 <code>头发颜色，衣服颜色，背景颜色，肤色，真实感，真实皮肤纹理</code>等等</p></li><li><p>step、guidance_scale 的值同样值得推敲</p></li></ul><p>后续应批量处理数据，不断改进参数，找到适配这样去风格处理手段的风格，测试 Multi_control 和 Single_control的差异</p><h1 id="不同风格适宜参数"><a href="#不同风格适宜参数" class="headerlink" title="不同风格适宜参数"></a>不同风格适宜参数</h1><table><thead><tr><th>风格</th><th>pose</th><th>cy_BG</th><th>cy_noFace</th><th>step</th><th>guidance_scale</th></tr></thead><tbody><tr><td>3D风格</td><td>0.33</td><td>0.35</td><td>0.2</td><td>40</td><td>10</td></tr><tr><td>end</td><td>0.3</td><td>0.4</td><td>0.3</td><td>-</td><td>-</td></tr><tr><td>Ghibli</td><td>0.33</td><td>0.5</td><td>0.3</td><td>45</td><td>8</td></tr><tr><td>end</td><td>0.3</td><td>0.8</td><td>0.65</td><td>-</td><td>-</td></tr><tr><td>WaterColor</td><td>0.33</td><td>0.5</td><td>0.3</td><td>45</td><td>8</td></tr><tr><td>end</td><td>0.3</td><td>0.8</td><td>0.65</td><td>-</td><td>-</td></tr><tr><td>monet</td><td>0.33</td><td>0.3</td><td>0.25</td><td>40</td><td>10</td></tr><tr><td>end</td><td>0.3</td><td>0.7</td><td>0.55</td><td>-</td><td>-</td></tr><tr><td>sketch</td><td>0.33</td><td>0.5</td><td>0.5</td><td>40</td><td>10</td></tr><tr><td>end</td><td>0.3</td><td>0.7</td><td>0.55</td><td>-</td><td>-</td></tr><tr><td>Disney</td><td>0.33</td><td>0.4</td><td>0.25</td><td>40</td><td>10</td></tr><tr><td>end</td><td>0.3</td><td>0.7</td><td>0.35</td><td>-</td><td>-</td></tr></tbody></table><h2 id="pixel"><a href="#pixel" class="headerlink" title="pixel"></a>pixel</h2><p>可以使用 Ghibli 当 Bridge 通过 Step-1X StyleTransfer 得到 ，sd 3.5 可以很好的处理 pixel 风格</p><h2 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h2><p>遗留问题：太不稳定了 但是只需要 100 200 张的话可以用量堆出来 </p><h2 id="moent"><a href="#moent" class="headerlink" title="moent"></a>moent</h2><p>遗留问题：肤色、男生</p><h2 id="FLUX-能力有限"><a href="#FLUX-能力有限" class="headerlink" title="FLUX 能力有限"></a>FLUX 能力有限</h2><p>在我测试的 极简 美漫 星月夜 梵高 … 效果不佳</p>]]></content>
      
      
      
        <tags>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的 HF 环境变量</title>
      <link href="/2025/05/02/HF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2025/05/02/HF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HF-环境变量"><a href="#HF-环境变量" class="headerlink" title="HF 环境变量"></a>HF 环境变量</h2><p>以 linux 为例，在<code>~/.bashrc</code>中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HUGGINGFACE_HUB_CACHE=<span class="string">&quot;/root/autodl-tmp/huggingface&quot;</span>  <span class="comment"># 替换为你的缓存目录</span></span><br><span class="line"><span class="built_in">export</span> HF_HOME=<span class="string">&quot;/root/autodl-tmp/huggingface&quot;</span> <span class="comment"># 替换为你的缓存目录</span></span><br><span class="line"><span class="built_in">export</span> HF_ENDPOINT=https://hf-mirror.com <span class="comment"># HF镜像地址</span></span><br></pre></td></tr></table></figure><p>然后执行<code>source ~/.bashrc</code>使环境变量生效。  </p><blockquote><p>注意：<code>/autodl-tmp/huggingface</code>是我在 autodl 上的一个临时目录，你可以根据自己的需要修改。  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HUGGINGFACE_HUB_CACHE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HF_HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HF_ENDPOINT</span></span><br></pre></td></tr></table></figure><p>如果输出以下结果，说明配置成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/root/autodl-tmp/huggingface</span><br><span class="line">/root/autodl-tmp/huggingface</span><br><span class="line">https://hf-mirror.com</span><br></pre></td></tr></table></figure><p>下载 huggingface-hub 库，使用 <code>huggingface-cli login</code> 命令登录 huggingface </p><h2 id="Autodl-环境变量"><a href="#Autodl-环境变量" class="headerlink" title="Autodl 环境变量"></a>Autodl 环境变量</h2><p>Autodl 内置 git 加速通道 （ autodl 上 git 速度简直太慢了，真不如下载 zip ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_TRACE_PACKET=1</span><br><span class="line"><span class="built_in">export</span> GIT_TRACE=1</span><br><span class="line"><span class="built_in">export</span> GIT_CURL_VERBOSE=1</span><br><span class="line"><span class="comment"># 能有个 几十Kb 的提升？ /冒汗</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/04/26/%E6%B8%B8%E6%88%8F/"/>
      <url>/2025/04/26/%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/30/hello-world/"/>
      <url>/2025/03/30/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about me</title>
      <link href="/aboutme/index.html"/>
      <url>/aboutme/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h1><blockquote><p>这个世界太疯狂，因为从小爱玩游戏，学了计算机，学了计算机以后就不怎么玩游戏了</p></blockquote><h4 id="👋-Hi-I’m-skippy"><a href="#👋-Hi-I’m-skippy" class="headerlink" title="👋 Hi, I’m @skippy"></a>👋 Hi, I’m @skippy</h4><ul><li><h4 id="23’JLU-Undergraduate-CSer-💻"><a href="#23’JLU-Undergraduate-CSer-💻" class="headerlink" title="23’JLU Undergraduate CSer 💻"></a>23’JLU Undergraduate CSer 💻</h4></li><li><h4 id="2004-天秤-INFJ-🐒"><a href="#2004-天秤-INFJ-🐒" class="headerlink" title="2004 天秤 INFJ 🐒"></a>2004 天秤 INFJ 🐒</h4></li><li><h4 id="技术栈：吃饭-睡觉-打豆豆-💤"><a href="#技术栈：吃饭-睡觉-打豆豆-💤" class="headerlink" title="技术栈：吃饭 睡觉 打豆豆 💤"></a>技术栈：吃饭 睡觉 打豆豆 💤</h4></li><li><h4 id="爱好：听歌-运动-玩游戏-🎵-🚴-💪-🎮"><a href="#爱好：听歌-运动-玩游戏-🎵-🚴-💪-🎮" class="headerlink" title="爱好：听歌 运动 玩游戏 🎵 🚴 💪 🎮"></a>爱好：听歌 运动 玩游戏 🎵 🚴 💪 🎮</h4></li></ul><h4 id="叫-skippy-是因为初中喜欢听-《崂山道士》，后面大家都这么叫，那就这么叫吧"><a href="#叫-skippy-是因为初中喜欢听-《崂山道士》，后面大家都这么叫，那就这么叫吧" class="headerlink" title="叫 skippy 是因为初中喜欢听 《崂山道士》，后面大家都这么叫，那就这么叫吧"></a>叫 skippy 是因为初中喜欢听 《崂山道士》，后面大家都这么叫，那就这么叫吧</h4><h2 id="Ing"><a href="#Ing" class="headerlink" title="Ing"></a>Ing</h2><h4 id="Vue-SpringBoot-Z-log-Welcome-to-fork-me-🎈🎈🎈-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Run-with-Collaborators-tocx1-panghuTT-👨-👸"><a href="#Vue-SpringBoot-Z-log-Welcome-to-fork-me-🎈🎈🎈-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Run-with-Collaborators-tocx1-panghuTT-👨-👸" class="headerlink" title="Vue+SpringBoot Z-log Welcome to fork me 🎈🎈🎈  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   Run with Collaborators : tocx1 panghuTT 👨 👸"></a>Vue+SpringBoot <code>Z-log</code> <a href="https://github.com/skippy-404/z-log">Welcome to fork me</a> 🎈🎈🎈  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   Run with Collaborators : <a href="https://github.com/tocx1/">tocx1</a> <a href="https://github.com/panghuTT">panghuTT</a> 👨 👸</h4><h4 id="Contributor-of-Spring-AI-Alibaba🎈🎈🎈-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Shoutout-to-nohup-for-the-pro-tips-🚀"><a href="#Contributor-of-Spring-AI-Alibaba🎈🎈🎈-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Shoutout-to-nohup-for-the-pro-tips-🚀" class="headerlink" title="Contributor of Spring AI Alibaba🎈🎈🎈 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shoutout to nohup for the pro tips! 🚀"></a>Contributor of <a href="https://github.com/alibaba/spring-ai-alibaba">Spring AI Alibaba</a>🎈🎈🎈 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shoutout to <a href="https://github.com/imp2002">nohup</a> for the pro tips! 🚀</h4><br><h2 id="My-Hero"><a href="#My-Hero" class="headerlink" title="My Hero"></a>My Hero</h2><div style="display: flex; justify-content: space-around; flex-wrap: wrap;">  <img src="/img/lld.jpg" style="flex: 1; max-width: 25%; height: auto;">  <img src="/img/mx.jpg" style="flex: 1; max-width: 25%; height: auto;">  <img src="/img/pgone.jpg" style="flex: 1; max-width: 25%; height: auto;">  <img src="/img/rpoz.jpg" style="flex: 1; max-width: 25%; height: auto;"></div><h2 id="I-Listen-To"><a href="#I-Listen-To" class="headerlink" title="I Listen To"></a>I Listen To</h2><div style="display: flex; justify-content: space-around; flex-wrap: wrap;">  <img src="/img/mww.jpg" style="flex: 1; max-width: 33%; height: auto;">  <img src="/img/wf.jpg" style="flex: 1; max-width: 33%; height: auto;">  <img src="/img/cl.jpg" style="flex: 1; max-width: 33%; height: auto;"></div><div style="display: flex; justify-content: space-around; flex-wrap: wrap;">  <img src="/img/drake.jpg" style="flex: 1; max-width: 33%; height: auto;">  <img src="/img/gunna.jpg" style="flex: 1; max-width: 33%; height: auto;">  <img src="/img/xiaoxia.jpg" style="flex: 1; max-width: 33%; height: auto;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/aplayer.css"/>
      <url>/css/aplayer.css</url>
      
        <content type="html"><![CDATA[/* 音乐播放器 */.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic {  height: 66px;  width: 66px;}#page:has(.aplayer):has(.aplayer-body):has(.aplayer-list) #post-comment .tk-comments-container > .tk-comment {  border: none;  box-shadow: none;}/* 导航栏音乐 */@media screen and (max-width: 1300px) {  #nav-music {    display: none !important;  }}#nav-music {  display: flex;  align-items: center;  z-index: 9;  position: fixed;  bottom: 20px;  left: 20px;  cursor: pointer;  transition: 0.5s;  transform-origin: left bottom;  box-shadow: var(--anzhiyu-shadow-border);  border-radius: 40px;  overflow: hidden;}#nav-music:active {  transform: scale(0.97);}#nav-music.playing {  box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  animation: playingShadow 5s linear infinite;}@keyframes playingShadow {  0% {    box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  }  50% {    box-shadow: 0 0px 12px 0px var(--anzhiyu-main);  }  100% {    box-shadow: 0 0px 12px -3px var(--anzhiyu-none);  }}#nav-music .aplayer.aplayer-withlrc .aplayer-pic {  height: 25px;  width: 25px;  border-radius: 40px;  z-index: 1;  transition: 0.3s;  transform: rotate(0deg) scale(1);  border: var(--style-border-always);  animation: changeright 24s linear infinite;  animation-play-state: paused;}#nav-music.playing .aplayer.aplayer-withlrc .aplayer-pic {  box-shadow: 0 0 14px #ffffffa6;  transform: rotate(0deg) scale(1.1);  border-color: var(--anzhiyu-white);  animation-play-state: running;}@keyframes changeright {  0% {    transform: rotate(0deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }  25% {    transform: rotate(90deg) scale(1.1);    box-shadow: 0 0 14px #ffffff;  }  50% {    transform: rotate(180deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }  75% {    transform: rotate(270deg) scale(1.1);    box-shadow: 0 0 14px #ffffff;  }  100% {    transform: rotate(360deg) scale(1.1);    box-shadow: 0 0 2px #ffffff00;  }}#nav-music .aplayer.aplayer-withlrc .aplayer-info {  height: 100%;  color: var(--anzhiyu-fontcolor);  margin: 0;  padding: 0;  display: flex;  align-items: center;}#nav-music.playing .aplayer.aplayer-withlrc .aplayer-info {  color: var(--anzhiyu-white);}#nav-music.playing #nav-music-hoverTips {  width: 0;  opacity: 0;}#nav-music #nav-music-hoverTips {  color: var(--anzhiyu-white);  background: var(--anzhiyu-main);  width: 100%;  height: 100%;  position: absolute;  top: 0;  left: 0;  align-items: center;  justify-content: center;  display: flex;  border-radius: 40px;  opacity: 0;  font-size: 12px;  z-index: 2;  transition: 0.3s;}#nav-music:hover:not(.playing) #nav-music-hoverTips {  opacity: 1;}#nav-music  .aplayer  .aplayer-info  .aplayer-controller  .aplayer-bar-wrap:hover  .aplayer-bar  .aplayer-played  .aplayer-thumb {  display: none;}#nav-music .aplayer {  background: var(--card-bg);  border-radius: 60px;  height: 41px;  display: flex;  margin: 0;  transition: 0.3s;  border: var(--style-border);  box-shadow: none;}#nav-music.playing .aplayer {  background: var(--anzhiyu-main-op-deep);  border: var(--style-border-hover);  backdrop-filter: saturate(180%) blur(20px);  backdrop-filter: blur(20px);}#nav-music .aplayer .aplayer-notice {  display: none;}#nav-music .aplayer .aplayer-miniswitcher {  display: none;}#nav-music .aplayer .aplayer-body {  position: relative;  display: flex;  align-items: center;}#nav-music .aplayer-list {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-music {  margin: 0;  display: flex;  align-items: center;  padding: 0 12px 0 8px;  cursor: pointer;  z-index: 1;  height: 100%;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-time {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-music .aplayer-author {  display: none;}#nav-music .aplayer.aplayer-withlist .aplayer-info {  border: none;}#nav-music .aplayer .aplayer-pic .aplayer-button {  bottom: 50%;  right: 50%;  transform: translate(50%, 50%);  margin: 0;  transition: 0.3s;}#nav-music .aplayer .aplayer-pic:has(.aplayer-button.aplayer-play) {  animation-play-state: paused;  transform: rotate(0deg) scale(1) !important;}#nav-music .aplayer.aplayer-withlrc .aplayer-pic {  margin-left: 8px;}#nav-music .aplayer .aplayer-info .aplayer-music .aplayer-title {  cursor: pointer;  line-height: 1;  display: inline-block;  white-space: nowrap;  max-width: 120px;  overflow: hidden;  text-overflow: ellipsis;  transition: 0.3s;  user-select: none;}#nav-music .aplayer .aplayer-info .aplayer-controller {  position: absolute;  width: 100%;  height: 100%;  top: 0;  left: 0;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap {  margin: 0;  padding: 0;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar {  height: 100%;  background: none;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded {  display: none;}#nav-music .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played {  height: 100%;  opacity: 0.1;  background-color: var(--anzhiyu-white) !important;  animation: lightBar 5s ease infinite;  animation-play-state: paused;}#nav-music.playing .aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played {  animation-play-state: running;}@keyframes lightBar {  0% {    opacity: 0.1;  }  60% {    opacity: 0.3;  }  100% {    opacity: 0.1;  }}/* 歌词 */#nav-music .aplayer.aplayer-withlrc .aplayer-lrc {  width: 0;  opacity: 0;  transition: 0.3s;  margin-top: -2px;  padding: 5px 0;}#nav-music.stretch .aplayer.aplayer-withlrc .aplayer-lrc {  margin-left: 8px;}#nav-music.stretch .aplayer.aplayer-withlrc .aplayer-lrc {  width: 200px;  margin-bottom: 0;  opacity: 1;}#nav-music .aplayer .aplayer-lrc p.aplayer-lrc-current {  color: var(--anzhiyu-white);  border: none;}#nav-music .aplayer .aplayer-lrc:after,#nav-music .aplayer .aplayer-lrc:before {  display: none;}#nav-music .aplayer .aplayer-lrc p {  color: #ffffffb3;}#nav-music .aplayer .aplayer-pic {  pointer-events: none;}#nav-music .aplayer .aplayer-pic .aplayer-button {  pointer-events: all;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #181b25;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>hi</title>
      <link href="/hi/index.html"/>
      <url>/hi/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu.js"/>
      <url>/js/anzhiyu.js</url>
      
        <content type="html"><![CDATA[var navMusicEl = document.getElementById("nav-music");var anzhiyu = {  //切换音乐播放状态  musicToggle: function (changePaly = true) {    if (!anzhiyu_musicFirst) {      musicBindEvent();      anzhiyu_musicFirst = true;    }    let msgPlay = '<i class="fa-solid fa-play"></i><span>播放音乐</span>'; // 此處可以更改為你想要顯示的文字    let msgPause = '<i class="fa-solid fa-pause"></i><span>暂停音乐</span>'; // 同上，但兩處均不建議更改    if (anzhiyu_musicPlaying) {      navMusicEl.classList.remove("playing");      // 修改右键菜单文案为播放      // document.getElementById("menu-music-toggle").innerHTML = msgPlay;      document.getElementById("nav-music-hoverTips").innerHTML = "音乐已暂停";      // document.querySelector("#consoleMusic").classList.remove("on");      anzhiyu_musicPlaying = false;      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("playing");      // 修改右键菜单文案为暂停      // document.getElementById("menu-music-toggle").innerHTML = msgPause;      // document.querySelector("#consoleMusic").classList.add("on");      anzhiyu_musicPlaying = true;      navMusicEl.classList.add("stretch");    }    if (changePaly) document.querySelector("#nav-music meting-js").aplayer.toggle();  },  // 音乐伸缩  musicTelescopic: function () {    if (navMusicEl.classList.contains("stretch")) {      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("stretch");    }  },  //音乐上一曲  musicSkipBack: function () {    document.querySelector("#nav-music meting-js").aplayer.skipBack();  },  //音乐下一曲  musicSkipForward: function () {    document.querySelector("#nav-music meting-js").aplayer.skipForward();  },  //获取音乐中的名称  musicGetName: function () {    var x = $(".aplayer-title");    var arr = [];    for (var i = x.length - 1; i >= 0; i--) {      arr[i] = x[i].innerText;    }    return arr[0];  },};// 如果有右键事件 可以在这里写。// addRightMenuClickEvent();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyuOnlyOne.js"/>
      <url>/js/anzhiyuOnlyOne.js</url>
      
        <content type="html"><![CDATA[var anzhiyu_musicPlaying = false;var anzhiyu_musicFirst = false;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyufunction.js"/>
      <url>/js/anzhiyufunction.js</url>
      
        <content type="html"><![CDATA[// 音乐绑定事件function musicBindEvent() {    document.querySelector("#nav-music .aplayer-music").addEventListener("click", function () {      anzhiyu.musicTelescopic();    });    document.querySelector("#nav-music .aplayer-button").addEventListener("click", function () {      anzhiyu.musicToggle(false);    });  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/meting.js"/>
      <url>/js/meting.js</url>
      
        <content type="html"><![CDATA["use strict";function _objectSpread(a) {  for (var b = 1; b < arguments.length; b++) {    var c = null == arguments[b] ? {} : arguments[b],      d = Object.keys(c);    "function" == typeof Object.getOwnPropertySymbols &&      (d = d.concat(        Object.getOwnPropertySymbols(c).filter(function (a) {          return Object.getOwnPropertyDescriptor(c, a).enumerable;        })      )),      d.forEach(function (b) {        _defineProperty(a, b, c[b]);      });  }  return a;}function _defineProperty(a, b, c) {  return (    b in a ? Object.defineProperty(a, b, { value: c, enumerable: !0, configurable: !0, writable: !0 }) : (a[b] = c), a  );}class MetingJSElement extends HTMLElement {  connectedCallback() {    window.APlayer && window.fetch && (this._init(), this._parse());  }  disconnectedCallback() {    this.lock || this.aplayer.destroy();  }  _camelize(a) {    return a      .replace(/^[_.\- ]+/, "")      .toLowerCase()      .replace(/[_.\- ]+(\w|$)/g, (a, b) => b.toUpperCase());  }  _init() {    let a = {};    for (let b = 0; b < this.attributes.length; b += 1)      a[this._camelize(this.attributes[b].name)] = this.attributes[b].value;    let b = [      "server",      "type",      "id",      "api",      "auth",      "auto",      "lock",      "name",      "title",      "artist",      "author",      "url",      "cover",      "pic",      "lyric",      "lrc",    ];    this.meta = {};    for (var c = 0; c < b.length; c++) {      let d = b[c];      (this.meta[d] = a[d]), delete a[d];    }    (this.config = a),      (this.api =        this.meta.api ||        window.meting_api ||        "https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r"),      this.meta.auto && this._parse_link();  }  _parse_link() {    let a = [      ["music.163.com.*song.*id=(\\d+)", "netease", "song"],      ["music.163.com.*album.*id=(\\d+)", "netease", "album"],      ["music.163.com.*artist.*id=(\\d+)", "netease", "artist"],      ["music.163.com.*playlist.*id=(\\d+)", "netease", "playlist"],      ["music.163.com.*discover/toplist.*id=(\\d+)", "netease", "playlist"],      ["y.qq.com.*song/(\\w+).html", "tencent", "song"],      ["y.qq.com.*album/(\\w+).html", "tencent", "album"],      ["y.qq.com.*singer/(\\w+).html", "tencent", "artist"],      ["y.qq.com.*playsquare/(\\w+).html", "tencent", "playlist"],      ["y.qq.com.*playlist/(\\w+).html", "tencent", "playlist"],      ["xiami.com.*song/(\\w+)", "xiami", "song"],      ["xiami.com.*album/(\\w+)", "xiami", "album"],      ["xiami.com.*artist/(\\w+)", "xiami", "artist"],      ["xiami.com.*collect/(\\w+)", "xiami", "playlist"],    ];    for (var b = 0; b < a.length; b++) {      let c = a[b],        d = new RegExp(c[0]),        e = d.exec(this.meta.auto);      if (null !== e) return (this.meta.server = c[1]), (this.meta.type = c[2]), void (this.meta.id = e[1]);    }  }  _parse() {    if (this.meta.url) {      let a = {        name: this.meta.name || this.meta.title || "Audio name",        artist: this.meta.artist || this.meta.author || "Audio artist",        url: this.meta.url,        cover: this.meta.cover || this.meta.pic,        lrc: this.meta.lrc || this.meta.lyric || "",        type: this.meta.type || "auto",      };      return (        a.lrc || (this.meta.lrcType = 0),        this.innerText && ((a.lrc = this.innerText), (this.meta.lrcType = 2)),        void this._loadPlayer([a])      );    }    let a = this.api      .replace(":server", this.meta.server)      .replace(":type", this.meta.type)      .replace(":id", this.meta.id)      .replace(":auth", this.meta.auth)      .replace(":r", Math.random());    fetch(a)      .then(a => a.json())      .then(a => this._loadPlayer(a));  }  _loadPlayer(a) {    let b = { audio: a, mutex: !0, lrcType: this.meta.lrcType || 3, storageName: "metingjs" };    if (a.length) {      let a = _objectSpread({}, b, this.config);      for (let b in a) ("true" === a[b] || "false" === a[b]) && (a[b] = "true" === a[b]);      let c = document.createElement("div");      (a.container = c), this.appendChild(c), (this.aplayer = new APlayer(a));    }  }}console.log(  "\n %c MetingJS v2.0.1 %c https://github.com/metowolf/MetingJS \n",  "color: #fadfa3; background: #030307; padding:5px 0;",  "background: #fadfa3; padding:5px 0;"),  window.customElements &&    !window.customElements.get("meting-js") &&    ((window.MetingJSElement = MetingJSElement), window.customElements.define("meting-js", MetingJSElement));]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一些值得写下心情的歌"><a href="#一些值得写下心情的歌" class="headerlink" title="一些值得写下心情的歌"></a>一些值得写下心情的歌</h1><h4 id="随心记录，有可能听了非常多遍了，也有可能只是每日推荐刚听到的"><a href="#随心记录，有可能听了非常多遍了，也有可能只是每日推荐刚听到的" class="headerlink" title="随心记录，有可能听了非常多遍了，也有可能只是每日推荐刚听到的"></a>随心记录，有可能听了非常多遍了，也有可能只是每日推荐刚听到的</h4><h2 id="陈一豪-鼻塞"><a href="#陈一豪-鼻塞" class="headerlink" title="陈一豪 - 鼻塞"></a>陈一豪 - 鼻塞</h2><p>am I outside?</p><blockquote><p>I am outside<br>I not sad</p></blockquote><p>6.29号，明天最后一门考试了，时间过得好快</p><div class="aplayer" data-id="2714340376" data-server="netease" data-type="song"></div><br><h2 id="莫文蔚-坚强的理由"><a href="#莫文蔚-坚强的理由" class="headerlink" title="莫文蔚 - 坚强的理由"></a>莫文蔚 - 坚强的理由</h2><p>给我一千个</p><blockquote><p>坚强的理由<br>坚强的理由</p></blockquote><div class="aplayer" data-id="277367" data-server="netease" data-type="song"></div><br><h2 id="声音玩具-没有人比我们更接近对方"><a href="#声音玩具-没有人比我们更接近对方" class="headerlink" title="声音玩具 - 没有人比我们更接近对方"></a>声音玩具 - 没有人比我们更接近对方</h2><p>连续单曲循环了两天</p><blockquote><p>直到再没有人能够<br>比我们更为接近对方</p></blockquote><div class="aplayer" data-id="1468592465" data-server="netease" data-type="song"></div><br><h2 id="田馥甄-一一"><a href="#田馥甄-一一" class="headerlink" title="田馥甄 - 一一"></a>田馥甄 - 一一</h2><p>没前奏，直给，不拖沓</p><blockquote><p>我们把小聪明<br>我们把大道理<br>先放开</p></blockquote><p>最近事情好多啊</p><div class="aplayer" data-id="1459744130" data-server="netease" data-type="song"></div><br><h2 id="王菲-脸"><a href="#王菲-脸" class="headerlink" title="王菲 - 脸"></a>王菲 - 脸</h2><p>变奏，真好听</p><blockquote><p>最好<br>没有人明白我说什么啊</p></blockquote><p>五月一号，有点累</p><div class="aplayer" data-id="299904" data-server="netease" data-type="song"></div><br><h2 id="方大同-回留"><a href="#方大同-回留" class="headerlink" title="方大同 - 回留"></a>方大同 - 回留</h2><p>一个人伏案工作常听</p><blockquote><p>lets go back<br>lets go back to the place</p></blockquote><p>忧伤与力量</p><div class="aplayer" data-id="2635125903" data-server="netease" data-type="song"></div><br><h2 id="小霞-礼貌"><a href="#小霞-礼貌" class="headerlink" title="小霞 - 礼貌"></a>小霞 - 礼貌</h2><p>欣赏每一个 我说“谢谢”，会回我“不客气”的人</p><blockquote><p>你不知道<br>那天的勇气逃之夭夭</p></blockquote><p>总有些没什么礼貌的人</p><div class="aplayer" data-id="1901320265" data-server="netease" data-type="song"></div><br><h2 id="陈粒-fxxk-the-rest"><a href="#陈粒-fxxk-the-rest" class="headerlink" title="陈粒 - fxxk the rest"></a>陈粒 - fxxk the rest</h2><p>网易云历史记录第一</p><blockquote><p>stay with me<br>fxxk the rest</p></blockquote><p>意义非凡</p><div class="aplayer" data-id="28941007" data-server="netease" data-type="song"></div><br><h2 id="kanye-Runaway"><a href="#kanye-Runaway" class="headerlink" title="kanye - Runaway"></a>kanye - Runaway</h2><p>很难相信这是14年的歌</p><blockquote><p>look at you<br>look at you<br>look at you</p></blockquote><p>男人是不能矫情的，咬碎牙往肚子里咽！！</p><div class="aplayer" data-id="18969210" data-server="netease" data-type="song"></div><br><h2 id="王菲-无常"><a href="#王菲-无常" class="headerlink" title="王菲 - 无常"></a>王菲 - 无常</h2><p>24年暑假离开深圳回学校的航班上一直在单曲循环，也是2024年的年度歌曲。</p><blockquote><p>喜中带忧，暗中有光<br>怎么度，怎么量</p></blockquote><p>很好诠释了我从当时到现在的很多想法</p><div class="aplayer" data-id="300146" data-server="netease" data-type="song"></div><br><h2 id="草东没有派对-床"><a href="#草东没有派对-床" class="headerlink" title="草东没有派对 - 床"></a>草东没有派对 - 床</h2><p>并不是摇滚音乐的垂直听众，但是有一天在每日推荐中听到，循环了很久。</p><blockquote><p>从何时对悲剧的向往<br>填满了整个心脏</p></blockquote><p>有种什么都不怕的感觉。</p><div class="aplayer" data-id="2035279723" data-server="netease" data-type="song"></div><br><h2 id="水木年华-再见了，最爱的人"><a href="#水木年华-再见了，最爱的人" class="headerlink" title="水木年华 - 再见了，最爱的人"></a>水木年华 - 再见了，最爱的人</h2><p>我爸的车载音乐里面有很多水木年华的歌，在我小学的时候我常常主动打开听，现在其实也是我爸的车载音乐，但我俩都再也没打开过了</p><blockquote><p>再见了最爱的人啊<br>最爱的人啊</p></blockquote><p>现在听起来有些黯然神伤，自己真的是一瞬间长大了</p><div class="aplayer" data-id="376363" data-server="netease" data-type="song"></div><br><h2 id="小霞-那是错，这时对"><a href="#小霞-那是错，这时对" class="headerlink" title="小霞 - 那是错，这时对"></a>小霞 - 那是错，这时对</h2><p>小霞，三张专辑质量均属上乘，很多首都值得反复听。</p><blockquote><p>那时候做错的事<br>是不够醉生梦死</p></blockquote><p>很少也刻意地不去纠结自己什么事做对了，什么事做错了。</p><div class="aplayer" data-id="1901320263" data-server="netease" data-type="song"></div><br>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>旅行</title>
      <link href="/travel/index.html"/>
      <url>/travel/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="看景不如听景"><a href="#看景不如听景" class="headerlink" title="看景不如听景"></a>看景不如听景</h1><h4 id="记录自高考以后去过的地方"><a href="#记录自高考以后去过的地方" class="headerlink" title="记录自高考以后去过的地方"></a>记录自高考以后去过的地方</h4><h2 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h2><h3 id="2023-06-西藏"><a href="#2023-06-西藏" class="headerlink" title="2023-06 - 西藏"></a>2023-06 - 西藏</h3><img src="/images/2023-06-01.jpg" alt="2023-06-01" style="width: 100%;"><h2 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h2><h3 id="2024-08-深圳"><a href="#2024-08-深圳" class="headerlink" title="2024-08 - 深圳"></a>2024-08 - 深圳</h3><h3 id="2024-09-天津"><a href="#2024-09-天津" class="headerlink" title="2024-09 - 天津"></a>2024-09 - 天津</h3>]]></content>
      
    </entry>
    
    
  
</search>
